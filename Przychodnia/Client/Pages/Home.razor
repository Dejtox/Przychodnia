@page "/home"
@using Przychodnia.Shared
@using Przychodnia.Client.Models.Adaptors
@using Przychodnia.Client.Components
@inject DialogService DialogService

<h3>Home</h3>

<RadzenScheduler LoadData=@OnLoadData @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
    TextProperty="Text" SelectedIndex="2"
    AppointmentRender=@OnAppointmentRender
    AppointmentSelect=@OnAppointmentSelect>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>



@code {
    RadzenScheduler<Appointment> scheduler;

    async Task<List<Appointment>> visitToAppointment(IEnumerable<Visit> visits)
    {
        List<Appointment> temp = new List<Appointment>();
        foreach (Visit v in visits)
        {
            temp.Add(new Appointment{visit = v});
        }
        return temp;
    }

    Visit[] visits = new Visit[]
                {
        new Visit
        {
            VisitId = 1,
            Name = "Wizyta kontrolna",
            Description = "Życie jest słabe i niefajne",
            Date = DateTime.Today.AddHours(14),
            Duration = 30,
            Paid = false,
            Successful = false
        },
        new Visit
        {
            VisitId = 2,
            Name = "Kanałowe",
            Description = "Życie jest słabe i niefajne",
            Date = DateTime.Today.AddHours(21),
            Duration = 30,
            Paid = false,
            Successful = false
        },
        new Visit
        {
            VisitId = 3,
            Name = "Wizyta kontrolna",
            Description = "Życie jest słabe i niefajne",
            Date = DateTime.Today.AddDays(2).AddHours(15),
            Duration = 30,
            Paid = false,
            Successful = false
        },
        new Visit
        {
            VisitId = 4,
            Name = "Wizyta kontrolna",
            Description = "Życie jest słabe i niefajne",
            Date = DateTime.Today.AddDays(-5).AddHours(17),
            Duration = 30,
            Paid = false,
            Successful = false
        },
        };


    List<Appointment> appointments;


    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        // Get the appointments for between the Start and End
        appointments = await visitToAppointment(visits);
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        await DialogService.OpenAsync<VisitDialog>(
            "View Visit", 
            new Dictionary<string, object> { { "appointment", args.Data } }
        );

        await scheduler.Reload();
    }
    
}
