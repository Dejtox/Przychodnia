@page "/home"
@using Przychodnia.Shared
@using Przychodnia.Client.Models.Adaptors
@using Przychodnia.Client.Components
@using Przychodnia.Client.Services
@inject DialogService DialogService
@inject NavigationManager NavManager
@inject Services.AppDataService appData


<h3 class="mb-4 px-4 d-flex justify-content-center">Strona Główna</h3>

<div class="d-flex justify-content-evenly">
    <div>
        <div>
            
                <RadzenCard class="m-3">
                    <h3 class="h5">Contact</h3>
                <div class="d-flex flex-row">
                    <RadzenImage Path="@appData.account.PhotoPath" Class="rounded-circle float-left mr-3" Style="width: 100px; height: 100px;" />
                    <div>
                        <div>Imię i nazwisko</div>
                        <div><b>@($"{appData.account.Name} {appData.account.Surname}")</b></div>
                        <div><b>@appData.account.RangName.RangName</b></div>                        
                        
                    </div>
                </div>
                <RadzenButton Click=@(args => OnAccountSelect(appData.account)) Text="Aktualizuj Informacje" Icon="account_box" ButtonStyle="ButtonStyle.Secondary" />
            </RadzenCard>
            @if(paidVisits!=null && paidVisits[0].Amount + paidVisits[1].Amount > 0 ){
            <RadzenCard class="m-3 graph">
                <h3 class="h5">Opłacone wizyty</h3>
                <div class="row">
                <RadzenChart>
                    <RadzenPieSeries Data="@paidVisits" CategoryProperty="Name" ValueProperty="Amount"/>
                    <RadzenLegend Position="LegendPosition.Bottom"/>
                </RadzenChart>
                </div>
            </RadzenCard>}
        </div>
    </div>


    <RadzenScheduler Style="width: calc(100% - 400px); height: auto; aspect-ratio: 1.3;" @ref=@scheduler SlotRender=@OnSlotRender  TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
    TextProperty="Text" SelectedIndex="2"
    AppointmentRender=@OnAppointmentRender
    AppointmentSelect=@OnAppointmentSelect>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    </RadzenScheduler>
    
    
</div>





@code {
    RadzenScheduler<Appointment> scheduler;


    class DataItem
    {
        public string Name { get; set; }
        public int Amount { get; set; }
    }

    DataItem[] paidVisits = new DataItem[] {
    new DataItem
    {
    Name = "Opłacone",
    Amount = 0
    },
    new DataItem
    {
    Name = "Nieopłacone",
    Amount = 0
    }};

    async Task<List<Appointment>> visitToAppointment(IEnumerable<Visit> visits)
    {
        List<Appointment> temp = new List<Appointment>();
        foreach (Visit v in visits)
        {
            temp.Add(new Appointment{visit = v});
        }
        return temp;
    }

    public List<Visit> visits = new List<Visit>() { new Visit()};

    List<Appointment> appointments = new List<Appointment>();

    [Inject]
    public IVisitService VisitService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (appData.isLoggedIn)
        {
            visits = (await VisitService.GetVisits()).Where(v => v.PatientName == $"{appData.account.Name} {appData.account.Surname}").ToList();
            appData.visits = visits;
            appointments = await visitToAppointment(appData.visits);
            paidVisits[0].Amount = visits.Where(v => v.Paid).Count();
            paidVisits[1].Amount = visits.Count() - paidVisits[0].Amount;
            StateHasChanged();
            appData.RefreshRequested += RefreshMe;
        }
        else
        {
            NavManager.NavigateTo("/");
        }
    }

    async void RefreshMe()
    {
        appointments = await visitToAppointment(appData.visits);
        StateHasChanged();
    }

    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        appointments = await visitToAppointment(appData.visits);
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.visit.Paid)
        {
            args.Attributes["style"] = "background: blue";
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        await DialogService.OpenAsync<VisitDialog>(
            "Wizyta", 
            new Dictionary<string, object> { { "appointment", args.Data } }
        );

        await scheduler.Reload();
    }

    async Task OnAccountSelect(User u)
    {
        await DialogService.OpenAsync<AccountDialog>(
            "Konto",
            new Dictionary<string, object> { { "account", u } }
        );
    }


}
