@page "/home"
@using Przychodnia.Shared
@using Przychodnia.Client.Models.Adaptors
@using Przychodnia.Client.Components
@inject DialogService DialogService

<h3>Strona Główna</h3>

<div class="d-flex justify-content-evenly">
    <div>
        <div>
            <RadzenCard class="m-3">
                <h3 class="h5">Contact</h3>
                <div class="d-flex flex-row">
                    <RadzenImage Path="@account.PhotoPath" Class="rounded-circle float-left mr-3" Style="width: 100px; height: 100px;" />
                    <div>
                        <div>Imię i nazwisko</div>
                        <div><b>@($"{account.Name} {account.Surname}")</b></div>
                        <div><b>@account.RoleName.RoleName</b></div>                        
                        
                    </div>
                </div>
                <RadzenButton Click=@(args => OnAccountSelect(account)) Text="Aktualizuj Informacje" Icon="account_box" ButtonStyle="ButtonStyle.Secondary" />
            </RadzenCard>
            <RadzenCard class="m-3">
                <h3 class="h5">Opłacone wizyty</h3>
                <div class="row">
                <RadzenChart>
                    <RadzenPieSeries Data="@paidVisits" CategoryProperty="Name" ValueProperty="Amount"/>
                    <RadzenLegend Position="LegendPosition.Bottom"/>
                </RadzenChart>
                </div>
            </RadzenCard>
        </div>
    </div>

    <RadzenScheduler Style="width: calc(100% - 400px); height: auto; aspect-ratio: 1.3;" LoadData=@OnLoadData @ref=@scheduler SlotRender=@OnSlotRender  TItem="Appointment" Data=@appointments StartProperty="Start" EndProperty="End"
    TextProperty="Text" SelectedIndex="2"
    AppointmentRender=@OnAppointmentRender
    AppointmentSelect=@OnAppointmentSelect>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>
</div>





@code {
    RadzenScheduler<Appointment> scheduler;

    User account = new User
        {
            ID = 1,
            Name = "Sebastian",
            Surname = "Zellah",
            PhotoPath = "https://pbs.twimg.com/media/EtvfOFTWYAc3j1q.jpg",
            RoleName = new Role { RoleID = 1, RoleName = "Lekarz" }
        };

    class DataItem
    {
        public string Name { get; set; }
        public int Amount { get; set; }
    }

    DataItem[] paidVisits = new DataItem[] {
    new DataItem
    {
    Name = "Opłacone",
    Amount = 3
    },
    new DataItem
    {
    Name = "Nieopłacone",
    Amount = 2
    }};

    async Task<List<Appointment>> visitToAppointment(IEnumerable<Visit> visits)
    {
        List<Appointment> temp = new List<Appointment>();
        foreach (Visit v in visits)
        {
            temp.Add(new Appointment{visit = v});
        }
        return temp;
    }

    Visit[] visits = new Visit[]
                {
        new Visit
        {
            VisitId = 1,
            Name = "Wizyta kontrolna",
            Description = "Życie jest słabe i niefajne",
            Date = DateTime.Today.AddHours(14),
            Duration = 30,
            Paid = false,
            Successful = false
        },
        new Visit
        {
            VisitId = 2,
            Name = "Kanałowe",
            Description = "Życie jest słabe i niefajne",
            Date = DateTime.Today.AddHours(21),
            Duration = 30,
            Paid = false,
            Successful = false
        },
        new Visit
        {
            VisitId = 3,
            Name = "Wizyta kontrolna",
            Description = "Życie jest słabe i niefajne",
            Date = DateTime.Today.AddDays(2).AddHours(15),
            Duration = 30,
            Paid = false,
            Successful = false
        },
        new Visit
        {
            VisitId = 4,
            Name = "Wizyta kontrolna",
            Description = "Życie jest słabe i niefajne",
            Date = DateTime.Today.AddDays(-5).AddHours(17),
            Duration = 30,
            Paid = false,
            Successful = false
        },
        };


    List<Appointment> appointments;


    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        // Get the appointments for between the Start and End
        appointments = await visitToAppointment(visits);
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        await DialogService.OpenAsync<VisitDialog>(
            "Wizyta", 
            new Dictionary<string, object> { { "appointment", args.Data } }
        );

        await scheduler.Reload();
    }

    async Task OnAccountSelect(User u)
    {
        await DialogService.OpenAsync<AccountDialog>(
            "Konto",
            new Dictionary<string, object> { { "account", u } }
        );
    }


}
