@page "/"
@using Przychodnia.Client.Services
@using System.Text
@using System.Security.Cryptography
@inject NavigationManager NavManager
@inject IUserService UserService
@inject Services.AppDataService appData
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime



<div class="d-flex justify-content-center">
    <div class="login-pane d-flex flex-column">
        <div style="padding: 100px 0px">
            <RadzenCard>
                <h2 class="mb-4">Zaloguj się</h2>
                <RadzenTemplateForm Data=@("Localization")>
                <RadzenLogin AllowRegister="true" AllowResetPassword="false"
                                LoginText="Zaloguj" UserText="Email" PasswordText="Hasło"
                                UserRequired="Login jest wymagany"
                                PasswordRequired="Hasło jest wymagane"
                                RegisterText="Rejestracja"
                                RegisterMessageText="Nie posiadasz konta?"
                                Login=@(args => OnLogin(args, "Localized login"))
                                Register=@(args => OnRegister()) />
                </RadzenTemplateForm>
            </RadzenCard>
        </div>
    </div>
</div>





@code {
    string userName = "";
    string password = "";



    async void OnLogin(LoginArgs args, string name)
    {
        try
        {
            var users = await UserService.GetUsers();
            User u = users.Where(u => u.Password == encrypt(args.Password) && u.Email == args.Username).First();
            if (u != null)
            {
                appData.account = u;
                Console.WriteLine(u.RangName.ToString());
                NavManager.NavigateTo("/home");
            }
        }
        catch(Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Email bądź hasło są błędne");
        }


    }

    string encrypt(string password)
    {
        using(SHA256 cipher = SHA256.Create())
        {
            byte[] hash = cipher.ComputeHash(Encoding.UTF8.GetBytes(password));
            StringBuilder builder = new StringBuilder();
            foreach (byte b in hash)
            {
                builder.Append(b.ToString("x2"));
            }
            return builder.ToString();
        }
    }

    void OnRegister()
    {
        NavManager.NavigateTo("/register");
    }
}
